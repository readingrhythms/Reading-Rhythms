---
import BaseLayout from '@layouts/BaseLayout.astro';

const getTomorrowsDate = () => {
  const tomorrow = new Date();
  tomorrow.setDate(tomorrow.getDate() + 1);
  return tomorrow.toISOString().split('T')[0];
};

const tomorrowsDate = getTomorrowsDate();

const fetchEvents = async () => {
  const options = {
    method: 'GET',
    headers: {
      accept: 'application/json',
      'x-luma-api-key': 'secret-EtDtVkTBFjFoltBNNgZO9EaUY'
    }
  };

  const apiUrl = `https://api.lu.ma/public/v1/calendar/list-events?after=${tomorrowsDate}&series_mode=sessions`;

  try {
    const response = await fetch(apiUrl, options);
    const data = await response.json();
    return data.entries.filter(entry => entry.event.visibility === 'public');
  } catch (err) {
    console.error(err);
    return [];
  }
};

const events = await fetchEvents();
---

<BaseLayout title='Reading Rhythms | Brooklyn Events' description='We throw the worldâ€™s best reading parties. Bringing reading, ambient music, and cozy venues together to create a one of a kind experience. Bring any book you want. As seen on TV &amp; in major media.' showNavbar={true} bodyClasses='bg-luma-gray text-white font-system' extraClasses='bg-luma-gray text-white font-system'>
  <div class="luma-wrapper max-w-4xl mx-auto">
    <div class="flex items-center justify-between">
      <div class="md:mr-24">
        <h1 class="md:mb-4 mx-auto text-xl md:text-3xl font-bold">Brooklyn Events</h1>
      </div>
      <a href="#" targey="_blank" rel="noopener" class="pt-2 pb-2.5 px-4 bg-rust text-white rounded text-sm md:text-base font-semibold">Subscribe</a>
    </div>
    <div class="md:flex mt-12">
      <div class="md:w-7/10 md:mr-8">
        <div class="events-container"></div>
      </div>
      <div class="md:w-3/10 md:mt-[39px]">
        <div id="calendar"></div>
        <div class="border border-white/5 p-4 rounded-md">
          Filter
        </div>
      </div>
    </div>
  </div>
  <div class="overlay fixed inset-0 bg-black bg-opacity-50 z-40 hidden"></div>
  <div class="sliding-div fixed top-0 right-0 w-3/5 h-full px-12 bg-[#202325] z-50 transform translate-x-full transition-transform">
    <button class="back-button absolute top-5 left-5 flex items-center text-white font-semibold">
      <img src="../src/assets/icons/arrow-right.svg" alt="Arrow icon" class="w-4 mr-1.5 scale-x-[-1]" />Back
    </button>
    <iframe class="w-full h-full mt-16" frameborder="0" aria-hidden="false" tabindex="0"></iframe>
    <div id="lumaLoader" class="fixed top-0 right-0 bottom-0 left-0 flex justify-center items-center bg-luma-gray z-50">
			<div class="loader"></div>
		</div>
  </div>
</BaseLayout>

<script type="module" define:vars={{events}}>
import VanillaCalendar from '../../node_modules/vanilla-calendar-pro';
import '../../node_modules/vanilla-calendar-pro/build/vanilla-calendar.min.css';

document.addEventListener('DOMContentLoaded', () => {
  let filteredEvents = events;

  const convertDateToEST = (dateStr) => {
    const date = new Date(dateStr);
    date.setHours(date.getHours() - 5); // EST is UTC -5 hours
    return date.toISOString().split('T')[0];
  };

  const updateEventsDisplay = (selectedDateStr) => {
    const selectedDate = new Date(selectedDateStr);
    filteredEvents = events.filter(event => {
      const eventDate = new Date(convertDateToEST(event.event.start_at));
      return eventDate.toDateString() === selectedDate.toDateString();
    });
    renderEvents();
  };

  const renderEvents = () => {
    const container = document.querySelector('.events-container');
    container.innerHTML = '';
    filteredEvents.forEach(event => {
      const startDate = new Date(event.event.start_at);
      const formattedDate = startDate.toLocaleDateString('en-US', { month: 'short', day: 'numeric' });
      const dayOfWeek = startDate.toLocaleDateString('en-US', { weekday: 'long' });
      const startTime = startDate.toLocaleTimeString('en-US', { hour: 'numeric', minute: 'numeric', hour12: true, timeZone: 'America/New_York' });

      const eventHTML = `
        <div class="flex items-center mb-3">
          <div class="hidden md:block ftimeline w-3.5 h-3.5 mr-5 -ml-8 bg-luma-gray border-[3px] border-[#4f5051] rounded-full z-10"></div>
          <p class="text-lg">
            <span class="font-bold">${formattedDate}</span> <span class="opacity-50">${dayOfWeek}</span>
          </p>
        </div>
        <a href="#" data-url="${event.event.url}" data-api-id="${event.event.api_id}" key="${event.event.api_id}" class="flex justify-between w-full mb-6 p-6 bg-luma-light-gray rounded-lg border border-white/5 transition-colors hover:border-white/15">
          <div>
            <p class="mb-2 text-sm md:text-base opacity-50">${startTime} EST</p>
            <h2 class="text-base md:text-xl font-bold">${event.event.name}</h2>
            <p class="flex items-center mt-2 text-sm md:text-base opacity-50"><img src="../src/assets/icons/map.svg" alt="Map icon" class="w-4 mr-1.5" /> ${event.event.geo_address_json?.address ?? 'Address not available'}</p>
          </div>
          <img src=${event.event.cover_url} alt=${event.event.name} class="w-20 md:w-36 h-20 md:h-36 rounded-lg" />
        </a>
      `;
      const eventDiv = document.createElement('div');
      eventDiv.className = 'event';
      eventDiv.innerHTML = eventHTML;
      container.appendChild(eventDiv);
    });
  };

  const calendarOptions = {
    settings: {
      visibility: { weekend: false },
      range: { min: new Date().toISOString().split('T')[0] }
    },
    actions: {
      clickDay(event, self) {
        if (self.selectedDates.length > 0) {
          const selectedDateStr = self.selectedDates[0];
          updateEventsDisplay(selectedDateStr);
        } else {
          filteredEvents = events;
          renderEvents();
        }
        setTimeout(highlightEventDays, 0);
      },
      clickArrow: () => setTimeout(highlightEventDays, 0)
    }
  };

  const highlightEventDays = () => {
    events.forEach(event => {
      const startDate = new Date(event.event.start_at);
      const year = startDate.getFullYear();
      const month = startDate.getMonth() + 1;
      const day = startDate.getDate();
      const formattedDate = `${year}-${month.toString().padStart(2, '0')}-${day.toString().padStart(2, '0')}`;
      const calendarDay = document.querySelector(`.vanilla-calendar-day__btn[data-calendar-day='${formattedDate}']`);
      if (calendarDay) calendarDay.classList.add('highlighted-day');
    });
  };

  const calendar = new VanillaCalendar('#calendar', calendarOptions);
  calendar.init();
  highlightEventDays();
  renderEvents();

  // Event listeners for dynamic elements
  const overlay = document.querySelector('.overlay');
  const slidingDiv = document.querySelector('.sliding-div');
  const iframe = slidingDiv.querySelector('iframe');
  const lumaLoader = document.getElementById('lumaLoader');
  const backButton = slidingDiv.querySelector('.back-button');

  const handleEventClick = (e) => {
    e.preventDefault();
    const apiId = e.currentTarget.getAttribute('data-api-id');
    iframe.src = `https://lu.ma/embed-checkout/${apiId}`;
    overlay.classList.remove('hidden');
    slidingDiv.classList.remove('translate-x-full');
  };

  document.querySelectorAll('a[data-url]').forEach(link => link.addEventListener('click', handleEventClick));
  iframe.addEventListener('load', () => lumaLoader.style.display = 'none');
  overlay.addEventListener('click', () => closeSlideOut());
  backButton.addEventListener('click', () => closeSlideOut());

  function closeSlideOut() {
    overlay.classList.add('hidden');
    slidingDiv.classList.add('translate-x-full');
  };
});
</script>

<style>
.loader {
  border-color: #fff;
  border-top-color: transparent;
}
@keyframes spin {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
.luma-wrapper:before {
  content: "";
  position: absolute;
  top: -129px;
  left: 0;
  width: 100%;
  height: 180px;
  background: linear-gradient(rgba(45,73,113,0.1) 0%, rgba(181,83,54,0.1) 50%, rgba(47,19,31,0) 100%);
}
.timeline::before {
  @apply absolute w-2 h-2 rounded-full bg-luma-gray z-10;
  content: "";
}
</style>

<style is:global>
 .events-container .event:first-of-type .timeline::after {
  @apply absolute h-full ml-[3px] border border-dashed border-white/10;
  content: "";
}

#calendar {
  @apply w-full min-w-0 mb-4 p-4 bg-transparent border border-white/5 rounded-md;
}

#calendar .vanilla-calendar-day__btn {
  @apply bg-transparent;
}

#calendar .vanilla-calendar-day__btn {
  @apply text-white;
}

#calendar .vanilla-calendar-day__btn_disabled {
  @apply text-white/50;
}

#calendar .highlighted-day:before {
  content: "";
  @apply absolute -bottom-1 w-2.5 h-2.5 bg-rust border-2 border-luma-gray rounded-full;
}

#calendar .vanilla-calendar-day__btn_today {
  @apply border border-white/25 max-w-8;
}
</style>